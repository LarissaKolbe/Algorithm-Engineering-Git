Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C++ Intel(R) 64 Compiler Classic for applications running on Intel(R) 64, Version 2021.8.0 Build 20221119_000000

Compiler options: -std=c++11 -lstdc++ -g -O0 -Wall -fsanitize=address -fsanitize=undefined -qopt-report=5 -qopt-report-phase=vec -fopenmp -O2 -g -DNDEBUG -qopenmp -std=c++11 -MD -MT CMakeFiles/Projekt_exec.dir/main.cpp.o -MF CMakeFiles/Projekt_exec.dir/main.cpp.o.d -o CMakeFiles/Projekt_exec.dir/main.cpp.o -c

Begin optimization report for: main()

    Report from: Vector optimizations [vec]


LOOP BEGIN at /home/le34xoh/Algorithm-Engineering-Git/Projekt/main.cpp(79,5) inlined into /home/le34xoh/Algorithm-Engineering-Git/Projekt/main.cpp(284,118)
   remark #15389: vectorization support: reference inputVector.__b_St12_Vector_baseI10Coordinate18alligned_allocatorIS0_Lm64EEE.__b_St12_Vector_baseI10Coordinate18alligned_allocatorIS0_Lm64EEE.__b_St12_Vector_baseI10Coordinate18alligned_allocatorIS0_Lm64EEE.__b_St12_Vector_baseI10Coordinate18alligned_allocatorIS0_Lm64EEE->x[i] has unaligned access   [ /home/le34xoh/Algorithm-Engineering-Git/Projekt/main.cpp(80,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <inputVector.__b_St12_Vector_baseI10Coordinate18alligned_allocato>, stride is 2   [ /home/le34xoh/Algorithm-Engineering-Git/Projekt/main.cpp(80,18) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <inputVector.__b_St12_Vector_baseI10Coordinate18alligned_allocato>, stride is 2   [ /home/le34xoh/Algorithm-Engineering-Git/Projekt/main.cpp(81,18) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 2.067
   remark #15355: vectorization support: meanX is float type reduction   [ /home/le34xoh/Algorithm-Engineering-Git/Projekt/main.cpp(75,17) ]
   remark #15355: vectorization support: meanY is float type reduction   [ /home/le34xoh/Algorithm-Engineering-Git/Projekt/main.cpp(75,30) ]
   remark #15301: SIMD LOOP WAS VECTORIZED
   remark #15452: unmasked strided loads: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 10 
   remark #15477: vector cost: 3.750 
   remark #15478: estimated potential speedup: 2.470 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /home/le34xoh/Algorithm-Engineering-Git/Projekt/main.cpp(79,5) inlined into /home/le34xoh/Algorithm-Engineering-Git/Projekt/main.cpp(284,118)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at /home/le34xoh/Algorithm-Engineering-Git/Projekt/main.cpp(86,5) inlined into /home/le34xoh/Algorithm-Engineering-Git/Projekt/main.cpp(284,118)
   remark #15389: vectorization support: reference inputVector.__b_St12_Vector_baseI10Coordinate18alligned_allocatorIS0_Lm64EEE.__b_St12_Vector_baseI10Coordinate18alligned_allocatorIS0_Lm64EEE.__b_St12_Vector_baseI10Coordinate18alligned_allocatorIS0_Lm64EEE.__b_St12_Vector_baseI10Coordinate18alligned_allocatorIS0_Lm64EEE->x[i] has unaligned access   [ /home/le34xoh/Algorithm-Engineering-Git/Projekt/main.cpp(87,33) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <inputVector.__b_St12_Vector_baseI10Coordinate18alligned_allocato>, stride is 2   [ /home/le34xoh/Algorithm-Engineering-Git/Projekt/main.cpp(87,33) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <inputVector.__b_St12_Vector_baseI10Coordinate18alligned_allocato>, stride is 2   [ /home/le34xoh/Algorithm-Engineering-Git/Projekt/main.cpp(88,33) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 1.358
   remark #15417: vectorization support: number of FP up converts: single precision to double precision 1   [ /usr/include/c++/10/cmath(418,14) ]
   remark #15418: vectorization support: number of FP down converts: double precision to single precision 1   [ /home/le34xoh/Algorithm-Engineering-Git/Projekt/main.cpp(87,9) ]
   remark #15417: vectorization support: number of FP up converts: single precision to double precision 1   [ /usr/include/c++/10/cmath(418,14) ]
   remark #15418: vectorization support: number of FP down converts: double precision to single precision 1   [ /home/le34xoh/Algorithm-Engineering-Git/Projekt/main.cpp(88,9) ]
   remark #15355: vectorization support: varianceX is float type reduction   [ /home/le34xoh/Algorithm-Engineering-Git/Projekt/main.cpp(87,9) ]
   remark #15355: vectorization support: varianceY is float type reduction   [ /home/le34xoh/Algorithm-Engineering-Git/Projekt/main.cpp(88,9) ]
   remark #15301: SIMD LOOP WAS VECTORIZED
   remark #15452: unmasked strided loads: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 30 
   remark #15477: vector cost: 13.250 
   remark #15478: estimated potential speedup: 2.220 
   remark #15487: type converts: 4 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /home/le34xoh/Algorithm-Engineering-Git/Projekt/main.cpp(86,5) inlined into /home/le34xoh/Algorithm-Engineering-Git/Projekt/main.cpp(284,118)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at /usr/include/c++/10/bits/stl_uninitialized.h(310,19) inlined into /home/le34xoh/Algorithm-Engineering-Git/Projekt/main.cpp(287,57)
   remark #15389: vectorization support: reference *__cur has unaligned access   [ /home/le34xoh/Algorithm-Engineering-Git/Projekt/aligned_allocator.h(60,23) ]
   remark #15389: vectorization support: reference *__first._M_current has unaligned access   [ /home/le34xoh/Algorithm-Engineering-Git/Projekt/aligned_allocator.h(60,23) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 0.014
   remark #15456: masked unaligned unit stride loads: 1 
   remark #15457: masked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 23 
   remark #15477: vector cost: 34.500 
   remark #15478: estimated potential speedup: 0.660 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/10/bits/stl_uninitialized.h(310,19) inlined into /home/le34xoh/Algorithm-Engineering-Git/Projekt/main.cpp(287,57)
<Remainder>
LOOP END

LOOP BEGIN at /usr/include/c++/10/bits/stl_uninitialized.h(310,19) inlined into /home/le34xoh/Algorithm-Engineering-Git/Projekt/main.cpp(291,33)
   remark #15389: vectorization support: reference *__cur has unaligned access   [ /home/le34xoh/Algorithm-Engineering-Git/Projekt/aligned_allocator.h(60,23) ]
   remark #15389: vectorization support: reference *__first._M_current has unaligned access   [ /home/le34xoh/Algorithm-Engineering-Git/Projekt/aligned_allocator.h(60,23) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 0.014
   remark #15456: masked unaligned unit stride loads: 1 
   remark #15457: masked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 23 
   remark #15477: vector cost: 34.500 
   remark #15478: estimated potential speedup: 0.660 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/10/bits/stl_uninitialized.h(310,19) inlined into /home/le34xoh/Algorithm-Engineering-Git/Projekt/main.cpp(291,33)
<Remainder>
LOOP END
===========================================================================

Begin optimization report for: generateNewPlot(aligned_vector<Coordinate> *, aligned_vector<Coordinate> *, const aligned_vector<Coordinate> &, statisticalProperties, Configurations, int, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/10/bits/random.tcc(330,7) inlined into /home/le34xoh/Algorithm-Engineering-Git/Projekt/main.cpp(204,19)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between gen._M_x[__i] (336:4) and gen._M_x[__i-1] (332:20)
LOOP END

LOOP BEGIN at /usr/include/c++/10/bits/stl_uninitialized.h(310,19) inlined into /home/le34xoh/Algorithm-Engineering-Git/Projekt/main.cpp(212,43)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between *__cur (60:23) and *__first._M_current (60:23)
   remark #15346: vector dependence: assumed ANTI dependence between *__first._M_current (60:23) and *__cur (60:23)
LOOP END

LOOP BEGIN at /usr/include/c++/10/bits/stl_uninitialized.h(310,19) inlined into /home/le34xoh/Algorithm-Engineering-Git/Projekt/main.cpp(212,43)
<Remainder>
LOOP END

LOOP BEGIN at /usr/include/c++/10/bits/stl_uninitialized.h(310,19) inlined into /home/le34xoh/Algorithm-Engineering-Git/Projekt/main.cpp(219,39)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between *__cur (60:23) and *__first._M_current (60:23)
   remark #15346: vector dependence: assumed ANTI dependence between *__first._M_current (60:23) and *__cur (60:23)
LOOP END

LOOP BEGIN at /usr/include/c++/10/bits/stl_uninitialized.h(310,19) inlined into /home/le34xoh/Algorithm-Engineering-Git/Projekt/main.cpp(219,39)
<Remainder>
LOOP END

LOOP BEGIN at /usr/include/c++/10/bits/random.tcc(3295,7) inlined into /home/le34xoh/Algorithm-Engineering-Git/Projekt/main.cpp(229,47)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/10/bits/random.tcc(455,7) inlined into /home/le34xoh/Algorithm-Engineering-Git/Projekt/main.cpp(229,47)
      remark #15388: vectorization support: reference gen._M_x[__k] has aligned access   [ /usr/include/c++/10/bits/random.tcc(403,22) ]
      remark #15389: vectorization support: reference gen._M_x[__k+1] has unaligned access   [ /usr/include/c++/10/bits/random.tcc(404,10) ]
      remark #15388: vectorization support: reference gen._M_x[__k] has aligned access   [ /usr/include/c++/10/bits/random.tcc(405,4) ]
      remark #15389: vectorization support: reference gen._M_x[__k+397] has unaligned access   [ /usr/include/c++/10/bits/random.tcc(405,17) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.171
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 2 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 26 
      remark #15477: vector cost: 17.500 
      remark #15478: estimated potential speedup: 1.480 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/10/bits/random.tcc(409,7) inlined into /home/le34xoh/Algorithm-Engineering-Git/Projekt/main.cpp(229,47)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between gen._M_x[__k] (413:4) and gen._M_x[__k+?] (413:4)
      remark #15346: vector dependence: assumed ANTI dependence between gen._M_x[__k+?] (413:4) and gen._M_x[__k] (413:4)
   LOOP END

   LOOP BEGIN at /usr/include/c++/10/bits/random.tcc(455,7) inlined into /home/le34xoh/Algorithm-Engineering-Git/Projekt/main.cpp(229,47)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at /home/le34xoh/Algorithm-Engineering-Git/Projekt/main.cpp(79,5) inlined into /home/le34xoh/Algorithm-Engineering-Git/Projekt/main.cpp(238,13)
   remark #15389: vectorization support: reference dataset->x[i] has unaligned access   [ /home/le34xoh/Algorithm-Engineering-Git/Projekt/main.cpp(80,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <dataset->x[i]>, stride is 2   [ /home/le34xoh/Algorithm-Engineering-Git/Projekt/main.cpp(80,18) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <dataset->y[i]>, stride is 2   [ /home/le34xoh/Algorithm-Engineering-Git/Projekt/main.cpp(81,18) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 2.067
   remark #15355: vectorization support: meanX is float type reduction   [ /home/le34xoh/Algorithm-Engineering-Git/Projekt/main.cpp(75,17) ]
   remark #15355: vectorization support: meanY is float type reduction   [ /home/le34xoh/Algorithm-Engineering-Git/Projekt/main.cpp(75,30) ]
   remark #15301: SIMD LOOP WAS VECTORIZED
   remark #15452: unmasked strided loads: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 10 
   remark #15477: vector cost: 3.750 
   remark #15478: estimated potential speedup: 2.470 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /home/le34xoh/Algorithm-Engineering-Git/Projekt/main.cpp(79,5) inlined into /home/le34xoh/Algorithm-Engineering-Git/Projekt/main.cpp(238,13)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at /home/le34xoh/Algorithm-Engineering-Git/Projekt/main.cpp(86,5) inlined into /home/le34xoh/Algorithm-Engineering-Git/Projekt/main.cpp(238,13)
   remark #15389: vectorization support: reference dataset->x[i] has unaligned access   [ /home/le34xoh/Algorithm-Engineering-Git/Projekt/main.cpp(87,33) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <dataset->x[i]>, stride is 2   [ /home/le34xoh/Algorithm-Engineering-Git/Projekt/main.cpp(87,33) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <dataset->y[i]>, stride is 2   [ /home/le34xoh/Algorithm-Engineering-Git/Projekt/main.cpp(88,33) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 1.358
   remark #15417: vectorization support: number of FP up converts: single precision to double precision 1   [ /usr/include/c++/10/cmath(418,14) ]
   remark #15418: vectorization support: number of FP down converts: double precision to single precision 1   [ /home/le34xoh/Algorithm-Engineering-Git/Projekt/main.cpp(87,9) ]
   remark #15417: vectorization support: number of FP up converts: single precision to double precision 1   [ /usr/include/c++/10/cmath(418,14) ]
   remark #15418: vectorization support: number of FP down converts: double precision to single precision 1   [ /home/le34xoh/Algorithm-Engineering-Git/Projekt/main.cpp(88,9) ]
   remark #15355: vectorization support: varianceX is float type reduction   [ /home/le34xoh/Algorithm-Engineering-Git/Projekt/main.cpp(87,9) ]
   remark #15355: vectorization support: varianceY is float type reduction   [ /home/le34xoh/Algorithm-Engineering-Git/Projekt/main.cpp(88,9) ]
   remark #15301: SIMD LOOP WAS VECTORIZED
   remark #15452: unmasked strided loads: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 30 
   remark #15477: vector cost: 13.250 
   remark #15478: estimated potential speedup: 2.220 
   remark #15487: type converts: 4 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /home/le34xoh/Algorithm-Engineering-Git/Projekt/main.cpp(86,5) inlined into /home/le34xoh/Algorithm-Engineering-Git/Projekt/main.cpp(238,13)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at /usr/include/c++/10/bits/stl_uninitialized.h(310,19) inlined into /home/le34xoh/Algorithm-Engineering-Git/Projekt/main.cpp(239,23)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between *__cur (60:23) and *__first._M_current (60:23)
   remark #15346: vector dependence: assumed ANTI dependence between *__first._M_current (60:23) and *__cur (60:23)
LOOP END

LOOP BEGIN at /usr/include/c++/10/bits/stl_uninitialized.h(310,19) inlined into /home/le34xoh/Algorithm-Engineering-Git/Projekt/main.cpp(239,23)
<Remainder>
LOOP END

LOOP BEGIN at /usr/include/c++/10/bits/stl_uninitialized.h(310,4) inlined into /home/le34xoh/Algorithm-Engineering-Git/Projekt/main.cpp(239,23)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between *__cur (60:23) and *__first (60:23)
   remark #15346: vector dependence: assumed ANTI dependence between *__first (60:23) and *__cur (60:23)
LOOP END

LOOP BEGIN at /usr/include/c++/10/bits/stl_uninitialized.h(310,4) inlined into /home/le34xoh/Algorithm-Engineering-Git/Projekt/main.cpp(239,23)
<Remainder>
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/le34xoh/Algorithm-Engineering-Git/Projekt/main.cpp(211,5)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/le34xoh/Algorithm-Engineering-Git/Projekt/main.cpp(216,26) ]

   LOOP BEGIN at /usr/include/c++/10/bits/charconv.h(63,4) inlined into /home/le34xoh/Algorithm-Engineering-Git/Projekt/main.cpp(218,61)
      remark #15522: loop was not vectorized: loop control flow is too complex. Try using canonical loop form from OpenMP specification
   LOOP END

   LOOP BEGIN at /usr/include/c++/10/bits/charconv.h(84,7) inlined into /home/le34xoh/Algorithm-Engineering-Git/Projekt/main.cpp(218,61)
      remark #15523: loop was not vectorized: loop control variable __pos was found, but loop iteration count cannot be computed before executing the loop
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: perturb(Coordinate, const aligned_vector<Coordinate> &, int, int, double, std::uniform_real_distribution<float>, std::mt19937)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /home/le34xoh/Algorithm-Engineering-Git/Projekt/main.cpp(147,39) inlined into /home/le34xoh/Algorithm-Engineering-Git/Projekt/main.cpp(173,87)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/10/bits/random.tcc(3295,7) inlined into /home/le34xoh/Algorithm-Engineering-Git/Projekt/main.cpp(173,87)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at /usr/include/c++/10/bits/random.tcc(455,7) inlined into /home/le34xoh/Algorithm-Engineering-Git/Projekt/main.cpp(173,87)
         remark #15388: vectorization support: reference gen._M_x[__k] has aligned access   [ /usr/include/c++/10/bits/random.tcc(403,22) ]
         remark #15389: vectorization support: reference gen._M_x[__k+1] has unaligned access   [ /usr/include/c++/10/bits/random.tcc(404,10) ]
         remark #15388: vectorization support: reference gen._M_x[__k] has aligned access   [ /usr/include/c++/10/bits/random.tcc(405,4) ]
         remark #15389: vectorization support: reference gen._M_x[__k+397] has unaligned access   [ /usr/include/c++/10/bits/random.tcc(405,17) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 2
         remark #15309: vectorization support: normalized vectorization overhead 0.171
         remark #15300: LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15450: unmasked unaligned unit stride loads: 2 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 26 
         remark #15477: vector cost: 17.500 
         remark #15478: estimated potential speedup: 1.480 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at /usr/include/c++/10/bits/random.tcc(409,7) inlined into /home/le34xoh/Algorithm-Engineering-Git/Projekt/main.cpp(173,87)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed FLOW dependence between gen._M_x[__k] (413:4) and gen._M_x[__k+?] (413:4)
         remark #15346: vector dependence: assumed ANTI dependence between gen._M_x[__k+?] (413:4) and gen._M_x[__k] (413:4)
      LOOP END

      LOOP BEGIN at /usr/include/c++/10/bits/random.tcc(455,7) inlined into /home/le34xoh/Algorithm-Engineering-Git/Projekt/main.cpp(173,87)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END

   LOOP BEGIN at /usr/include/c++/10/bits/random.tcc(3295,7) inlined into /home/le34xoh/Algorithm-Engineering-Git/Projekt/main.cpp(173,87)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at /usr/include/c++/10/bits/random.tcc(455,7) inlined into /home/le34xoh/Algorithm-Engineering-Git/Projekt/main.cpp(173,87)
         remark #15388: vectorization support: reference gen._M_x[__k] has aligned access   [ /usr/include/c++/10/bits/random.tcc(403,22) ]
         remark #15389: vectorization support: reference gen._M_x[__k+1] has unaligned access   [ /usr/include/c++/10/bits/random.tcc(404,10) ]
         remark #15388: vectorization support: reference gen._M_x[__k] has aligned access   [ /usr/include/c++/10/bits/random.tcc(405,4) ]
         remark #15389: vectorization support: reference gen._M_x[__k+397] has unaligned access   [ /usr/include/c++/10/bits/random.tcc(405,17) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 2
         remark #15309: vectorization support: normalized vectorization overhead 0.171
         remark #15300: LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15450: unmasked unaligned unit stride loads: 2 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 26 
         remark #15477: vector cost: 17.500 
         remark #15478: estimated potential speedup: 1.480 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at /usr/include/c++/10/bits/random.tcc(409,7) inlined into /home/le34xoh/Algorithm-Engineering-Git/Projekt/main.cpp(173,87)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed FLOW dependence between gen._M_x[__k] (413:4) and gen._M_x[__k+?] (413:4)
         remark #15346: vector dependence: assumed ANTI dependence between gen._M_x[__k+?] (413:4) and gen._M_x[__k] (413:4)
      LOOP END

      LOOP BEGIN at /usr/include/c++/10/bits/random.tcc(455,7) inlined into /home/le34xoh/Algorithm-Engineering-Git/Projekt/main.cpp(173,87)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/10/bits/stl_uninitialized.h(310,19) inlined into /home/le34xoh/Algorithm-Engineering-Git/Projekt/main.cpp(179,52)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between *__cur (60:23) and *__first._M_current (60:23)
   remark #15346: vector dependence: assumed ANTI dependence between *__first._M_current (60:23) and *__cur (60:23)
LOOP END

LOOP BEGIN at /usr/include/c++/10/bits/stl_uninitialized.h(310,19) inlined into /home/le34xoh/Algorithm-Engineering-Git/Projekt/main.cpp(179,52)
<Remainder>
LOOP END

LOOP BEGIN at /usr/include/c++/10/bits/random.tcc(3295,7) inlined into /home/le34xoh/Algorithm-Engineering-Git/Projekt/main.cpp(179,76)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/10/bits/random.tcc(455,7) inlined into /home/le34xoh/Algorithm-Engineering-Git/Projekt/main.cpp(179,76)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at /usr/include/c++/10/bits/random.tcc(455,7) inlined into /home/le34xoh/Algorithm-Engineering-Git/Projekt/main.cpp(179,76)
      remark #15388: vectorization support: reference gen._M_x[__k] has aligned access   [ /usr/include/c++/10/bits/random.tcc(403,22) ]
      remark #15389: vectorization support: reference gen._M_x[__k+1] has unaligned access   [ /usr/include/c++/10/bits/random.tcc(404,10) ]
      remark #15388: vectorization support: reference gen._M_x[__k] has aligned access   [ /usr/include/c++/10/bits/random.tcc(405,4) ]
      remark #15389: vectorization support: reference gen._M_x[__k+397] has unaligned access   [ /usr/include/c++/10/bits/random.tcc(405,17) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.457
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 2 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 26 
      remark #15477: vector cost: 17.500 
      remark #15478: estimated potential speedup: 1.470 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/10/bits/random.tcc(455,7) inlined into /home/le34xoh/Algorithm-Engineering-Git/Projekt/main.cpp(179,76)
   <Remainder loop for vectorization>
   LOOP END

   LOOP BEGIN at /usr/include/c++/10/bits/random.tcc(409,7) inlined into /home/le34xoh/Algorithm-Engineering-Git/Projekt/main.cpp(179,76)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between gen._M_x[__k] (413:4) and gen._M_x[__k+?] (413:4)
      remark #15346: vector dependence: assumed ANTI dependence between gen._M_x[__k+?] (413:4) and gen._M_x[__k] (413:4)
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/le34xoh/Algorithm-Engineering-Git/Projekt/main.cpp(179,9)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/le34xoh/Algorithm-Engineering-Git/Projekt/main.cpp(33,18) ]
LOOP END
===========================================================================

Begin optimization report for: calculateStatisticalProperties(const Coordinate *, int, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /home/le34xoh/Algorithm-Engineering-Git/Projekt/main.cpp(79,5)
   remark #15389: vectorization support: reference dataset->x[i] has unaligned access   [ /home/le34xoh/Algorithm-Engineering-Git/Projekt/main.cpp(80,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <dataset->x[i]>, stride is 2   [ /home/le34xoh/Algorithm-Engineering-Git/Projekt/main.cpp(80,18) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <dataset->y[i]>, stride is 2   [ /home/le34xoh/Algorithm-Engineering-Git/Projekt/main.cpp(81,18) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 2.067
   remark #15355: vectorization support: meanX is float type reduction   [ /home/le34xoh/Algorithm-Engineering-Git/Projekt/main.cpp(75,17) ]
   remark #15355: vectorization support: meanY is float type reduction   [ /home/le34xoh/Algorithm-Engineering-Git/Projekt/main.cpp(75,30) ]
   remark #15301: SIMD LOOP WAS VECTORIZED
   remark #15452: unmasked strided loads: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 10 
   remark #15477: vector cost: 3.750 
   remark #15478: estimated potential speedup: 2.470 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /home/le34xoh/Algorithm-Engineering-Git/Projekt/main.cpp(79,5)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at /home/le34xoh/Algorithm-Engineering-Git/Projekt/main.cpp(86,5)
   remark #15389: vectorization support: reference dataset->x[i] has unaligned access   [ /home/le34xoh/Algorithm-Engineering-Git/Projekt/main.cpp(87,33) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <dataset->x[i]>, stride is 2   [ /home/le34xoh/Algorithm-Engineering-Git/Projekt/main.cpp(87,33) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <dataset->y[i]>, stride is 2   [ /home/le34xoh/Algorithm-Engineering-Git/Projekt/main.cpp(88,33) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 1.358
   remark #15417: vectorization support: number of FP up converts: single precision to double precision 1   [ /usr/include/c++/10/cmath(418,14) ]
   remark #15418: vectorization support: number of FP down converts: double precision to single precision 1   [ /home/le34xoh/Algorithm-Engineering-Git/Projekt/main.cpp(87,9) ]
   remark #15417: vectorization support: number of FP up converts: single precision to double precision 1   [ /usr/include/c++/10/cmath(418,14) ]
   remark #15418: vectorization support: number of FP down converts: double precision to single precision 1   [ /home/le34xoh/Algorithm-Engineering-Git/Projekt/main.cpp(88,9) ]
   remark #15355: vectorization support: varianceX is float type reduction   [ /home/le34xoh/Algorithm-Engineering-Git/Projekt/main.cpp(87,9) ]
   remark #15355: vectorization support: varianceY is float type reduction   [ /home/le34xoh/Algorithm-Engineering-Git/Projekt/main.cpp(88,9) ]
   remark #15301: SIMD LOOP WAS VECTORIZED
   remark #15452: unmasked strided loads: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 30 
   remark #15477: vector cost: 13.250 
   remark #15478: estimated potential speedup: 2.220 
   remark #15487: type converts: 4 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /home/le34xoh/Algorithm-Engineering-Git/Projekt/main.cpp(86,5)
<Remainder loop for vectorization>
LOOP END
===========================================================================

Begin optimization report for: moveRandomPoint(Coordinate, int, int, std::uniform_real_distribution<float>, std::mt19937)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /home/le34xoh/Algorithm-Engineering-Git/Projekt/main.cpp(147,39)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/10/bits/random.tcc(3295,7) inlined into /home/le34xoh/Algorithm-Engineering-Git/Projekt/main.cpp(142,41)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at /usr/include/c++/10/bits/random.tcc(455,7) inlined into /home/le34xoh/Algorithm-Engineering-Git/Projekt/main.cpp(142,41)
      <Peeled loop for vectorization>
      LOOP END

      LOOP BEGIN at /usr/include/c++/10/bits/random.tcc(455,7) inlined into /home/le34xoh/Algorithm-Engineering-Git/Projekt/main.cpp(142,41)
         remark #15388: vectorization support: reference gen._M_x[__k] has aligned access   [ /usr/include/c++/10/bits/random.tcc(403,22) ]
         remark #15389: vectorization support: reference gen._M_x[__k+1] has unaligned access   [ /usr/include/c++/10/bits/random.tcc(404,10) ]
         remark #15388: vectorization support: reference gen._M_x[__k] has aligned access   [ /usr/include/c++/10/bits/random.tcc(405,4) ]
         remark #15389: vectorization support: reference gen._M_x[__k+397] has unaligned access   [ /usr/include/c++/10/bits/random.tcc(405,17) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 2
         remark #15309: vectorization support: normalized vectorization overhead 0.457
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15450: unmasked unaligned unit stride loads: 2 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 26 
         remark #15477: vector cost: 17.500 
         remark #15478: estimated potential speedup: 1.470 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at /usr/include/c++/10/bits/random.tcc(455,7) inlined into /home/le34xoh/Algorithm-Engineering-Git/Projekt/main.cpp(142,41)
      <Remainder loop for vectorization>
      LOOP END

      LOOP BEGIN at /usr/include/c++/10/bits/random.tcc(409,7) inlined into /home/le34xoh/Algorithm-Engineering-Git/Projekt/main.cpp(142,41)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed FLOW dependence between gen._M_x[__k] (413:4) and gen._M_x[__k+?] (413:4)
         remark #15346: vector dependence: assumed ANTI dependence between gen._M_x[__k+?] (413:4) and gen._M_x[__k] (413:4)
      LOOP END
   LOOP END

   LOOP BEGIN at /usr/include/c++/10/bits/random.tcc(3295,7) inlined into /home/le34xoh/Algorithm-Engineering-Git/Projekt/main.cpp(143,41)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at /usr/include/c++/10/bits/random.tcc(455,7) inlined into /home/le34xoh/Algorithm-Engineering-Git/Projekt/main.cpp(143,41)
      <Peeled loop for vectorization>
      LOOP END

      LOOP BEGIN at /usr/include/c++/10/bits/random.tcc(455,7) inlined into /home/le34xoh/Algorithm-Engineering-Git/Projekt/main.cpp(143,41)
         remark #15388: vectorization support: reference gen._M_x[__k] has aligned access   [ /usr/include/c++/10/bits/random.tcc(403,22) ]
         remark #15389: vectorization support: reference gen._M_x[__k+1] has unaligned access   [ /usr/include/c++/10/bits/random.tcc(404,10) ]
         remark #15388: vectorization support: reference gen._M_x[__k] has aligned access   [ /usr/include/c++/10/bits/random.tcc(405,4) ]
         remark #15389: vectorization support: reference gen._M_x[__k+397] has unaligned access   [ /usr/include/c++/10/bits/random.tcc(405,17) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 2
         remark #15309: vectorization support: normalized vectorization overhead 0.457
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15450: unmasked unaligned unit stride loads: 2 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 26 
         remark #15477: vector cost: 17.500 
         remark #15478: estimated potential speedup: 1.470 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at /usr/include/c++/10/bits/random.tcc(455,7) inlined into /home/le34xoh/Algorithm-Engineering-Git/Projekt/main.cpp(143,41)
      <Remainder loop for vectorization>
      LOOP END

      LOOP BEGIN at /usr/include/c++/10/bits/random.tcc(409,7) inlined into /home/le34xoh/Algorithm-Engineering-Git/Projekt/main.cpp(143,41)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed FLOW dependence between gen._M_x[__k] (413:4) and gen._M_x[__k+?] (413:4)
         remark #15346: vector dependence: assumed ANTI dependence between gen._M_x[__k+?] (413:4) and gen._M_x[__k] (413:4)
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: isErrorOk(Coordinate *, const statisticalProperties &, int, double, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /home/le34xoh/Algorithm-Engineering-Git/Projekt/main.cpp(79,5) inlined into /home/le34xoh/Algorithm-Engineering-Git/Projekt/main.cpp(119,90)
   remark #15389: vectorization support: reference currentDS->x[i] has unaligned access   [ /home/le34xoh/Algorithm-Engineering-Git/Projekt/main.cpp(80,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <currentDS->x[i]>, stride is 2   [ /home/le34xoh/Algorithm-Engineering-Git/Projekt/main.cpp(80,18) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <currentDS->y[i]>, stride is 2   [ /home/le34xoh/Algorithm-Engineering-Git/Projekt/main.cpp(81,18) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 2.067
   remark #15355: vectorization support: meanX is float type reduction   [ /home/le34xoh/Algorithm-Engineering-Git/Projekt/main.cpp(75,17) ]
   remark #15355: vectorization support: meanY is float type reduction   [ /home/le34xoh/Algorithm-Engineering-Git/Projekt/main.cpp(75,30) ]
   remark #15301: SIMD LOOP WAS VECTORIZED
   remark #15452: unmasked strided loads: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 10 
   remark #15477: vector cost: 3.750 
   remark #15478: estimated potential speedup: 2.470 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /home/le34xoh/Algorithm-Engineering-Git/Projekt/main.cpp(79,5) inlined into /home/le34xoh/Algorithm-Engineering-Git/Projekt/main.cpp(119,90)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at /home/le34xoh/Algorithm-Engineering-Git/Projekt/main.cpp(86,5) inlined into /home/le34xoh/Algorithm-Engineering-Git/Projekt/main.cpp(119,90)
   remark #15389: vectorization support: reference currentDS->x[i] has unaligned access   [ /home/le34xoh/Algorithm-Engineering-Git/Projekt/main.cpp(87,33) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <currentDS->x[i]>, stride is 2   [ /home/le34xoh/Algorithm-Engineering-Git/Projekt/main.cpp(87,33) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <currentDS->y[i]>, stride is 2   [ /home/le34xoh/Algorithm-Engineering-Git/Projekt/main.cpp(88,33) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 1.358
   remark #15417: vectorization support: number of FP up converts: single precision to double precision 1   [ /usr/include/c++/10/cmath(418,14) ]
   remark #15418: vectorization support: number of FP down converts: double precision to single precision 1   [ /home/le34xoh/Algorithm-Engineering-Git/Projekt/main.cpp(87,9) ]
   remark #15417: vectorization support: number of FP up converts: single precision to double precision 1   [ /usr/include/c++/10/cmath(418,14) ]
   remark #15418: vectorization support: number of FP down converts: double precision to single precision 1   [ /home/le34xoh/Algorithm-Engineering-Git/Projekt/main.cpp(88,9) ]
   remark #15355: vectorization support: varianceX is float type reduction   [ /home/le34xoh/Algorithm-Engineering-Git/Projekt/main.cpp(87,9) ]
   remark #15355: vectorization support: varianceY is float type reduction   [ /home/le34xoh/Algorithm-Engineering-Git/Projekt/main.cpp(88,9) ]
   remark #15301: SIMD LOOP WAS VECTORIZED
   remark #15452: unmasked strided loads: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 30 
   remark #15477: vector cost: 13.250 
   remark #15478: estimated potential speedup: 2.220 
   remark #15487: type converts: 4 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /home/le34xoh/Algorithm-Engineering-Git/Projekt/main.cpp(86,5) inlined into /home/le34xoh/Algorithm-Engineering-Git/Projekt/main.cpp(119,90)
<Remainder loop for vectorization>
LOOP END
===========================================================================
